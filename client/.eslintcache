[{"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/index.js":"1","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/serviceWorker.js":"2","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/App.js":"3","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/SingleIdea.js":"4","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/Home.js":"5","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/NoMatch.js":"6","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/Login.js":"7","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/Signup.js":"8","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/Profile.js":"9","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/components/Footer/index.js":"10","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/components/Header/index.js":"11","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/components/IdeaList/index.js":"12","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/components/IdeaForm/index.js":"13"},{"size":510,"mtime":1611583687781,"results":"14","hashOfConfig":"15"},{"size":5642,"mtime":1611583987996,"results":"16","hashOfConfig":"15"},{"size":1091,"mtime":1611535206145,"results":"17","hashOfConfig":"15"},{"size":547,"mtime":1611583433333,"results":"18","hashOfConfig":"15"},{"size":1447,"mtime":1612826004393,"results":"19","hashOfConfig":"15"},{"size":174,"mtime":1611583101254,"results":"20","hashOfConfig":"15"},{"size":2331,"mtime":1611583077150,"results":"21","hashOfConfig":"15"},{"size":2504,"mtime":1611583378580,"results":"22","hashOfConfig":"15"},{"size":1688,"mtime":1612827554452,"results":"23","hashOfConfig":"15"},{"size":235,"mtime":1611582564712,"results":"24","hashOfConfig":"15"},{"size":646,"mtime":1612826186661,"results":"25","hashOfConfig":"15"},{"size":2066,"mtime":1612825864645,"results":"26","hashOfConfig":"15"},{"size":5169,"mtime":1612825549021,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"cz5fdt",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/index.js",[],["57","58"],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/serviceWorker.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/App.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/SingleIdea.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/Home.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/NoMatch.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/Login.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/Signup.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/pages/Profile.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/components/Footer/index.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/components/Header/index.js",[],"/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/components/IdeaList/index.js",["59"],"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst IdeaList = ({ ideas, title }) => {\n    //If there are no ideas, return h3.\n    if (!ideas.length) {\n        return <h3>No Ideas Yet</h3>;\n    }\n\n    //Otherwise, render the list of ideas posted.\n    return (\n        <div>\n            {title &&\n                <h3 className=\"py-2\">{title}</h3>}\n            {ideas &&\n            ideas.map((idea) => (\n                <div key={idea.createdAt} className=\"card mb-3\">\n                    <div className=\"card-header\">\n                        <Link\n                            to={`/profile/${idea.username}`}\n                            style={{ fontWeight: 700 }}\n                            className=\"text-light\"\n                        >\n                            <div className=\"idea-heading flex-row justify-space-between\">\n                                <span className=\"idea-heading-name\">{idea.username + \" \"}</span>\n                                <span className=\"idea-heading-date\">         \n                                    <i>\n                                        {\n                                            new Date(\n                                                parseInt(idea.createdAt)\n                                            ).toLocaleString().split(',')[0]\n                                        }\n                                    </i>\n                                </span>\n                            </div>\n                        </Link>{' '}\n                    </div>\n                    <p className=\"px-2 idea-text\">\n                        {idea.idea}\n                    </p>\n                    {idea.image &&\n                        <div className=\"px-2\">\n                            <img\n                                className=\"mt-3 idea-img\"\n                                src={idea.image} alt=\"Image for Idea\"\n                            />\n                        </div>\n                    }\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default IdeaList;","/Users/michaelhanson/Documents/Bootcamp/PostBootcamp/awsideadump/client/src/components/IdeaForm/index.js",["60"],"import React, { useState, useRef, useEffect } from 'react';\n\nconst IdeaForm = () => {\n    //Set up state for an idea and the username of the poster.\n    const [formState, setFormState] = useState({ username: '', idea: '' });\n    const [characterCount, setCharacterCount] = useState(0);\n    const [chosenPhrase, setChosenPhrase] = useState(\"\");\n    const fileInput = useRef(null);\n\n    //Get random phrase for input field.\n    let randomPhrases = [\n        \"Here's a new one...\",\n        \"Hey, I got an idea...\",\n        \"Just gonna dump this idea here...\",\n        \"How's this for an idea...\",\n        \"I'm gonna dump my idea right here...\",\n    ];\n\n    useEffect(() => {\n        setChosenPhrase(randomPhrases[Math.floor(Math.random() * randomPhrases.length)]);\n    }, [])\n    \n    //Update state based on form input changes.\n    const handleChange = event => {\n        if (event.target.value.length <= 500) {\n            setFormState({ ...formState, [event.target.name]: event.target.value });\n            setCharacterCount(event.target.value.length);\n        }\n    };\n\n    //Upload the image being uploaded.\n    const handleImageUpload = event => {\n        event.preventDefault();\n        const data = new FormData();\n        //Add the file currently selected to the data object created with the FormData class.\n        //data will now hold 'image' as a name and the file as the value.\n        data.append('image', fileInput.current.files[0]);\n        //Send image file to endpoint with the postImage function\n        const postImage = async () => {\n            try {\n                //Try sending the image to be uploaded.\n                const res = await fetch('/api/image-upload', {\n                    mode: 'cors',\n                    method: 'POST',\n                    body: data\n                })\n                if (!res.ok) throw new Error(res.statusText);\n\n                //Wait for the image metadata to be returned back from a successful server call.\n                const postResponse = await res.json();\n                //Add the image URL (returned back in the Location property of the response) to the form state to be sent.\n                //This will provide reference to the actual uploaded file in the s3 bucket.\n                setFormState({...formState, image: postResponse.Location})\n                \n                return postResponse.Location;\n            } catch (error) {\n                console.log(error);\n            }\n        };\n        postImage();\n    };\n\n    //Handle form submit.\n    const handleFormSubmit = event => {\n        event.preventDefault();\n        //POST method with formState\n        const postData = async () => {\n            const res = await fetch('/api/users', {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(formState)\n            })\n            const data = await res.json();\n            console.log(data);\n        }\n        postData();\n        //Clear form value and state.\n        setFormState({ username: '', idea: '' });\n        setCharacterCount(0);\n    };\n\n    return (\n        <div>\n            <p className={`m-0 ${characterCount === 500 ? 'text-error' : ''}`}>\n                Dump Space Left: {characterCount}/500\n                {/* {error && <span className=\"ml-2\">Something went wrong...</span>} */}\n            </p>\n            <form\n                className=\"flex-row justify-center justify-space-between-md align-stretch\"\n                onSubmit={handleFormSubmit}\n            >\n                <input\n                    placeholder=\"Name\"\n                    name=\"username\"\n                    value={formState.username}\n                    className=\"form-input col-12\"\n                    onChange={handleChange}\n                ></input>\n                <textarea\n                    placeholder={chosenPhrase}\n                    name=\"idea\"\n                    value={formState.idea}\n                    className=\"form-input col-12\"\n                    onChange={handleChange}\n                    rows=\"4\"\n                ></textarea>\n                <label className=\"form-input col-12 p-1\">\n                    Include Image: \n                    <input\n                        type=\"file\"\n                        ref={fileInput}\n                        className=\"form-input p-2 my-3\"\n                    />\n                    <div className=\"image-btn-wrapper\">\n                        <button \n                            className=\"btn upload-img-btn\" \n                            onClick={handleImageUpload} \n                            type=\"submit\"\n                        >\n                            Upload Image <i className=\"fad fa-camera-retro\"></i>\n                        </button>\n                    </div>\n                    \n                </label>\n                <button className=\"btn col-12 submit-btn\" type=\"submit\">\n                    Submit <i className=\"fas fa-paper-plane\"></i>\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default IdeaForm;",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":43,"column":29,"nodeType":"67","endLine":46,"endColumn":31},{"ruleId":"68","severity":1,"message":"69","line":21,"column":8,"nodeType":"70","endLine":21,"endColumn":10,"suggestions":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'randomPhrases'. Either include it or remove the dependency array.","ArrayExpression",["74"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [randomPhrases]",{"range":"77","text":"78"},[769,771],"[randomPhrases]"]